import pandas as pd 
import matplotlib.pyplot as plt 
from sklearn.cluster import KMeans 
from sklearn.preprocessing import StandardScaler 
 
# Load the Wisconsin Breast Cancer dataset  
data = pd.read_csv('breast_cancer.csv') 
 
# Preprocessing: 
# 1. Drop unnecessary columns (e.g., 'id', 'Unnamed: 32') 
data = data.drop(['id', 'Unnamed: 32'], axis=1, errors='ignore') 
 
# 2. Convert diagnosis to numerical labels (Malignant=1, Benign=0) 
data['diagnosis'] = data['diagnosis'].map({'M': 1, 'B': 0}) 
 
# 3. Separate features and target variable 
X = data.drop('diagnosis', axis=1)  # Features 
y = data['diagnosis']  # Target 
 
# Standardize the features 
scaler = StandardScaler() 
X_scaled = scaler.fit_transform(X) 
 
# Determine optimal k using the Elbow method 
# iterate through different values of k (from 1 to 10), applies k-means 
#clustering and calculate the Within-Cluster Sum of Squares (WCSS). 
#WCSS is a measure of the variance within each cluster.  
 
wcss = [] 
for i in range(1, 11): 
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300,  
                    n_init=10, random_state=0) 
    kmeans.fit(X_scaled) 
    wcss.append(kmeans.inertia_) 
plt.plot(range(1, 11), wcss) 
plt.title('Elbow Method') 
plt.xlabel('Number of Clusters') 
plt.ylabel('WCSS') 
plt.show() 
 
 
 
# Apply K-Means clustering (choose k based on the elbow method) 
k = 2  #2 clusters 
kmeans = KMeans(n_clusters=k, init='k-means++', max_iter=300, n_init=10, 
random_state=0) 
y_kmeans = kmeans.fit_predict(X_scaled) 
 
# Visualize the clusters (using PCA for dimensionality reduction) 
from sklearn.decomposition import PCA 
pca = PCA(n_components=2) 
X_pca = pca.fit_transform(X_scaled) 
 
plt.figure(figsize=(8, 6)) 
for i in range(k): 
    plt.scatter(X_pca[y_kmeans == i, 0], X_pca[y_kmeans == i, 1],  
                label=f'Cluster {i}') 
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],  
                      s=300, c='yellow', label='Centroids') 
plt.title('K-Means Clustering') 
plt.xlabel('Principal Component 1') 
plt.ylabel('Principal Component 2') 
plt.legend() 
plt.show()
